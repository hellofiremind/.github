name: AI-Code-Review

on:
  workflow_call:
    inputs:
      environment:
        required: false
        type: string
    secrets:
      CONFLUENCE_API_TOKEN:
        required: true

concurrency:
  group: ${{ github.head_ref }}-concurrency
  cancel-in-progress: false

permissions:
  contents: write
  id-token: write
  pull-requests: write

jobs:
  ai-code-review:
    name: ai-code-review
    environment: ${{ inputs.environment || github.base_ref || github.ref_name }}
    runs-on: ubuntu-24.04
    env:
      ENVIRONMENT: ${{ inputs.environment || github.base_ref || github.ref_name }}
      CONFLUENCE_API_TOKEN: ${{ secrets.CONFLUENCE_API_TOKEN }}

    steps:
      - name: Checkout the repository to the runner
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.head.sha }}

      - name: Download reviewer folder from HelloFiremind/.github repo
        run: |
          mkdir -p reviewer
          curl -L https://github.com/HelloFiremind/.github/archive/refs/heads/main.tar.gz | tar -xz --strip-components=1 .github-main/reviewer

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::026090512591:role/GithubActionsDeploymentIAMRole
          role-session-name: GithubActionsDeploymentIAMRole
          aws-region: eu-west-1

      - name: Install poetry
        run: |
          pipx install poetry
          poetry self add poetry-plugin-export
        env:
          POETRY_VIRTUALENVS_CREATE: false

      - name: Install Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Run AI Reviews
        working-directory: ${{ github.workspace }}
        env:
          BASE: ${{ github.event.pull_request.base.ref }}
          HEAD: ${{ github.event.pull_request.head.ref }}
          CONFLUENCE_API_TOKEN: ${{ secrets.CONFLUENCE_API_TOKEN }}
        run: |
          git fetch origin $BASE
          git fetch origin $HEAD

          # ---------------- Terraform ----------------
          terraform_changed_files=$(git diff --diff-filter=ACMR --name-only origin/$BASE...origin/$HEAD "**" | grep '\.tf$' | grep -v 'modules/' || true)
          if [ -n "$terraform_changed_files" ]; then
            echo "terraform files changed: $terraform_changed_files"
            mkdir -p reviewer/terraform_context
            
            for file in $terraform_changed_files; do
              mkdir -p "reviewer/terraform_context/$(dirname "$file")"
              echo "filename: $file" > "reviewer/terraform_context/$file"
              cat "$file" >> "reviewer/terraform_context/$file" || echo "Failed to append contents of $file"
            done
            find reviewer/terraform_context -type f -exec split -b 200000 {} {}_split_ \;
            cd reviewer
            poetry export --without-hashes -o requirements.txt
            pip install -r requirements.txt
            cd ..
            find reviewer/terraform_context -type f -name "*_split_*" | xargs -I {} -n 1 -P 8 python3 reviewer/function.py --filename {} --review-type infrastructure >> reviewer/llm-terraform.txt
          else
            echo "No terraform files changed."
          fi

          # ---------------- Python ----------------
          python_changed_files=$(git diff --diff-filter=ACMR --name-only origin/$BASE...origin/$HEAD "src/**" ':!src/examples/**' | grep '\.py$' || true)
          if [ -n "$python_changed_files" ]; then
            echo "python files changed: $python_changed_files"
            mkdir -p reviewer/python_context
            for file in $python_changed_files; do
              mkdir -p "reviewer/python_context/$(dirname "$file")"
              echo "# filename: $file" > "reviewer/python_context/$file"
              cat "$file" >> "reviewer/python_context/$file" || echo "Failed to append contents of $file"
            done
            find reviewer/python_context -type f -exec split -b 200000 {} {}_split_ \;
            cd reviewer
            poetry export --without-hashes -o requirements.txt
            pip install -r requirements.txt
            cd ..
            find reviewer/python_context -type f -name "*_split_*" | xargs -I {} -n 1 -P 8 python3 reviewer/function.py --filename {} --review-type python >> reviewer/llm-python.txt
          else
            echo "No python files changed."
          fi

      - name: Comment on PR with AI Reviews
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const prNumber = context.issue.number;
            const sections = ['python', 'terraform'];
            let commentBody = '';

            for (const type of sections) {
              const capitalizedType = type.charAt(0).toUpperCase() + type.slice(1);
              const path = `reviewer/llm-${type}.txt`;
              if (fs.existsSync(path)) {
                const content = fs.readFileSync(path, 'utf8').trim();
                if (content.length > 0) {
                  commentBody += `# ðŸ¤– AI Code Review - ${capitalizedType}\n\n${content}\n\n`;
                } else {
                  commentBody += `# ðŸ¤– AI Code Review - ${capitalizedType}\n\nNo relevant code found for review.\n\n`;
                }
              } else {
                commentBody += `# ðŸ¤– AI Code Review - ${capitalizedType}\n\nReview file not generated.\n\n`;
              }
            }

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: commentBody
            });
